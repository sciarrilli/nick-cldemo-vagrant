
Vagrant.configure("2") do |config|
  wbid = 1
  udp_port_lo = "#{100+wbid*2}"
  udp_port_hi = "#{101+wbid*2}"
  config.vm.provider :libvirt do |domain|
    domain.nic_adapter_count = 55
    domain.management_network_address = "10.255.#{wbid}.0/24"
    domain.management_network_name = "wbr#{wbid}"
  end


{% for device in devices %}
{% if device.category == 'oob-mgmt-server' %}
  config.vm.define "{{ device.hostname }}" do |device|
      device.vm.synced_folder '.', '/vagrant', :disabled => true

      device.vm.provider :libvirt do |v|
        v.memory = {{ device.memory }}
      end
      device.vm.hostname = "{{ device.hostname }}"
      device.vm.box = "boxcutter/ubuntu1404"

      {% for cable in device.eth_map %}
      {% if device.hostname == device.cabling[cable].src_host and cable == device.cabling[cable].src_iface %}
      device.vm.network "private_network",
        :libvirt__tunnel_type => 'udp',
        :libvirt__tunnel_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
        :libvirt__tunnel_local_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
        {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
        auto_config: false
      {% endif %}
      {% if device.hostname == device.cabling[cable].dest_host and cable == device.cabling[cable].dest_iface %}
      device.vm.network "private_network",
        :libvirt__tunnel_type => 'udp',
        :libvirt__tunnel_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
        :libvirt__tunnel_local_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
        {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
        auto_config: false
      {% endif %}
      {% endfor %}

      device.vm.synced_folder ".", "/vagrant", disabled: true
      device.vm.provision :shell , inline: "sudo sed -i 's/sleep [0-9]*/sleep 1/' /etc/init/failsafe.conf"
      device.vm.provision :shell , path: "./helper_scripts/oob_server_config.sh"
      device.vm.provision "file", source: "./helper_scripts/rename_eth_swp", destination: "/home/vagrant/rename_eth_swp"
      device.vm.provision "file", source: "./helper_scripts/autogenerated/{{ device.hostname }}_remap_eth", destination: "/home/vagrant/remap_eth"
      device.vm.provision :shell , inline: "mv /home/vagrant/rename_eth_swp /etc/init.d/rename_eth_swp"
      device.vm.provision :shell , inline: "mv /home/vagrant/remap_eth /etc/default/remap_eth"
      device.vm.provision :shell , inline: "chmod 755 /etc/init.d/rename_eth_swp"
      device.vm.provision :shell , inline: "sudo sed -i '/exit 0/d' /etc/rc.local "
      device.vm.provision :shell , inline: "sudo echo '/etc/init.d/rename_eth_swp start' >> /etc/rc.local "
      device.vm.provision :shell , inline: "sudo echo 'exit 0' >> /etc/rc.local "
      device.vm.provision :shell , inline: "/etc/init.d/rename_eth_swp verbose"

      device.vm.provision "ansible" do |ansible|
        ansible.playbook = "./playbook/site.yml"
        ansible.extra_vars = {wbench_hosts: {
            {% for device2 in devices %}
            {% if "eth0" in device2.mac_map %}
                {{ device2.hostname}}: {ip: "{{device2.mgmt_ip}}", mac: "{{device2.mac_map['eth0']}}"},
            {% endif %}
            {% endfor %}
                            }}
      end
  end
{% elif device.category == 'oob-mgmt-switch' %}
config.vm.define "{{ device.hostname }}" do |device|
    device.vm.synced_folder '.', '/vagrant', :disabled => true

    device.vm.provider :libvirt do |v|
      v.memory = {{ device.memory }}
    end
    device.vm.hostname = "{{ device.hostname }}"
    device.vm.box = "CumulusCommunity/cumulus-vx"

    {% for cable in device.eth_map %}
    {% if device.hostname == device.cabling[cable].src_host and cable == device.cabling[cable].src_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% if device.hostname == device.cabling[cable].dest_host and cable == device.cabling[cable].dest_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% endfor %}

    # Disabling the default synced folder
    device.vm.synced_folder ".", "/vagrant", disabled: true
    device.vm.provision :shell , path: "./helper_scripts/oob_switch_config.sh"
    device.vm.provision "file", source: "./helper_scripts/rename_eth_swp", destination: "/home/vagrant/rename_eth_swp"
    device.vm.provision "file", source: "./helper_scripts/autogenerated/{{ device.hostname }}_remap_eth", destination: "/home/vagrant/remap_eth"
    device.vm.provision :shell , inline: "mv /home/vagrant/rename_eth_swp /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "mv /home/vagrant/remap_eth /etc/default/remap_eth"
    device.vm.provision :shell , inline: "chmod 755 /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "/etc/init.d/rename_eth_swp verbose"

end
{% elif device.category == 'internet' %}

config.vm.define "{{ device.hostname }}" do |device|
    device.vm.provider "virtualbox" do |v|
      v.name = "{{ device.hostname }}"
      v.memory = {{ device.memory }}
    end
    device.vm.hostname = "{{ device.hostname }}"
    device.vm.box = "CumulusCommunity/cumulus-vx"

    {% for cable in device.eth_map %}
    {% if device.hostname == device.cabling[cable].src_host and cable == device.cabling[cable].src_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% if device.hostname == device.cabling[cable].dest_host and cable == device.cabling[cable].dest_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% endfor %}

    device.vm.synced_folder ".", "/vagrant", disabled: true
    device.vm.provision :shell , path: "./helper_scripts/internet_config.sh"
    device.vm.provision "file", source: "./helper_scripts/rename_eth_swp", destination: "/home/vagrant/rename_eth_swp"
    device.vm.provision "file", source: "./helper_scripts/autogenerated/{{ device.hostname }}_remap_eth", destination: "/home/vagrant/remap_eth"
    device.vm.provision :shell , inline: "mv /home/vagrant/rename_eth_swp /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "mv /home/vagrant/remap_eth /etc/default/remap_eth"
    device.vm.provision :shell , inline: "chmod 755 /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "/etc/init.d/rename_eth_swp verbose"

end

{% elif device.category == 'switch' %}
config.vm.define "{{ device.hostname }}" do |device|
    device.vm.synced_folder '.', '/vagrant', :disabled => true

    device.vm.provider :libvirt do |v|
      v.memory = {{ device.memory }}
    end
    device.vm.hostname = "{{ device.hostname }}"
    device.vm.box = "CumulusCommunity/cumulus-vx"

    {% for cable in device.eth_map %}
    {% if device.hostname == device.cabling[cable].src_host and cable == device.cabling[cable].src_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% if device.hostname == device.cabling[cable].dest_host and cable == device.cabling[cable].dest_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% endfor %}

    # Disabling the default synced folder
    device.vm.synced_folder ".", "/vagrant", disabled: true
    device.vm.provision :shell , path: "./helper_scripts/pre_config.sh"
    device.vm.provision "file", source: "./helper_scripts/rename_eth_swp", destination: "/home/vagrant/rename_eth_swp"
    device.vm.provision "file", source: "./helper_scripts/autogenerated/{{ device.hostname }}_remap_eth", destination: "/home/vagrant/remap_eth"
    device.vm.provision :shell , inline: "mv /home/vagrant/rename_eth_swp /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "mv /home/vagrant/remap_eth /etc/default/remap_eth"
    device.vm.provision :shell , inline: "chmod 755 /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "/etc/init.d/rename_eth_swp verbose"

    device.vm.provision :shell , path: "./helper_scripts/post_config_switch.sh"
end

{% elif device.category == 'server' %}
config.vm.define "{{ device.hostname }}" do |device|
    device.vm.synced_folder '.', '/vagrant', :disabled => true

    device.vm.provider :libvirt do |v|
      v.memory = {{ device.memory }}
    end
    device.vm.hostname = "{{ device.hostname }}"
    device.vm.box = "boxcutter/ubuntu1404"

    {% for cable in device.eth_map %}
    {% if device.hostname == device.cabling[cable].src_host and cable == device.cabling[cable].src_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% if device.hostname == device.cabling[cable].dest_host and cable == device.cabling[cable].dest_iface %}
    device.vm.network "private_network",
      :libvirt__tunnel_type => 'udp',
      :libvirt__tunnel_port => "#{udp_port_hi}{{ device.cabling[cable].net_id }}",
      :libvirt__tunnel_local_port => "#{udp_port_lo}{{ device.cabling[cable].net_id }}",
      {% if cable in device.mac_map %}:mac => "{{ device.mac_map[cable]|replace(':', '') }}",{% endif %}
      auto_config: false
    {% endif %}
    {% endfor %}

    device.vm.synced_folder ".", "/vagrant", disabled: true
    device.vm.provision :shell , inline: "sudo sed -i 's/sleep [0-9]*/sleep 1/' /etc/init/failsafe.conf"
    device.vm.provision :shell , path: "./helper_scripts/pre_config.sh"
    device.vm.provision "file", source: "./helper_scripts/rename_eth_swp", destination: "/home/vagrant/rename_eth_swp"
    device.vm.provision "file", source: "./helper_scripts/autogenerated/{{ device.hostname }}_remap_eth", destination: "/home/vagrant/remap_eth"
    device.vm.provision :shell , inline: "mv /home/vagrant/rename_eth_swp /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "mv /home/vagrant/remap_eth /etc/default/remap_eth"
    device.vm.provision :shell , inline: "chmod 755 /etc/init.d/rename_eth_swp"
    device.vm.provision :shell , inline: "sudo sed -i '/exit 0/d' /etc/rc.local "
    device.vm.provision :shell , inline: "sudo echo '/etc/init.d/rename_eth_swp start' >> /etc/rc.local "
    device.vm.provision :shell , inline: "sudo echo 'exit 0' >> /etc/rc.local "
    device.vm.provision :shell , inline: "/etc/init.d/rename_eth_swp verbose"

    device.vm.provision :shell , path: "./helper_scripts/post_config_server.sh"
end
{% endif %}
{% endfor %}


end
